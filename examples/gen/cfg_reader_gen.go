// Code generated by proto_code_gen. DO NOT EDIT
package gen

import (
    
	"examples/pb"
)


type ExampleR struct {
	v *pb.Example
}

func NewExampleR(src *pb.Example) *ExampleR {
	return &ExampleR{v:src}
}

func (r *ExampleR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ExampleR) Raw() *pb.Example {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ExampleR) GetInt32Field() int32 {
	return r.v.GetInt32Field()
}

func (r *ExampleR) GetStringField() string {
	return r.v.GetStringField()
}

func (r *ExampleR) GetFloatField() float32 {
	return r.v.GetFloatField()
}

func (r *ExampleR) LenOfInt32Slice() int {
    return len(r.v.GetInt32Slice())
}
func (r *ExampleR) ElemOfInt32Slice(index int) int32 {
    return r.v.GetInt32Slice()[index]
}

func (r *ExampleR) LenOfStringSlice() int {
    return len(r.v.GetStringSlice())
}
func (r *ExampleR) ElemOfStringSlice(index int) string {
    return r.v.GetStringSlice()[index]
}


func (r *ExampleR) GetSingleChild() *ChildR {
	return NewChildR(r.v.GetSingleChild())
}

func (r *ExampleR) LenOfChildSlice() int {
    return len(r.v.GetChildSlice())
}
func (r *ExampleR) ElemOfChildSlice(index int) *ChildR {
    return NewChildR(r.v.GetChildSlice()[index])
}

func (r *ExampleR) LenOfNormalMap() int {
    return len(r.v.GetNormalMap())
}
func (r *ExampleR) ElemOfNormalMap(key int32) string {
    return r.v.GetNormalMap()[key]
}
func (r *ExampleR) RangeNormalMap(f func(k int32,v string) bool) {
    for k,v := range r.v.GetNormalMap() {
        if !f(k,v) {
            return
        }
    }
}

func (r *ExampleR) LenOfChildMap() int {
    return len(r.v.GetChildMap())
}
func (r *ExampleR) ElemOfChildMap(key string) *ChildR {
    if v,ok := r.v.GetChildMap()[key]; ok {
        return NewChildR(v)
    }
    return nil
}
func (r *ExampleR) RangeChildMap(f func(k string,v *ChildR) bool) {
    for k,v := range r.v.GetChildMap() {
        if !f(k,NewChildR(v)) {
            return
        }
    }
}


type Example2R struct {
	v *pb.Example2
}

func NewExample2R(src *pb.Example2) *Example2R {
	return &Example2R{v:src}
}

func (r *Example2R) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *Example2R) Raw() *pb.Example2 {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *Example2R) GetInt32Field() int32 {
	return r.v.GetInt32Field()
}

func (r *Example2R) GetStringField() string {
	return r.v.GetStringField()
}


type ExampleWithoutTagR struct {
	v *pb.ExampleWithoutTag
}

func NewExampleWithoutTagR(src *pb.ExampleWithoutTag) *ExampleWithoutTagR {
	return &ExampleWithoutTagR{v:src}
}

func (r *ExampleWithoutTagR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ExampleWithoutTagR) Raw() *pb.ExampleWithoutTag {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ExampleWithoutTagR) GetInt32Field() int32 {
	return r.v.GetInt32Field()
}

func (r *ExampleWithoutTagR) GetStringField() string {
	return r.v.GetStringField()
}


type ChildR struct {
	v *pb.Child
}

func NewChildR(src *pb.Child) *ChildR {
	return &ChildR{v:src}
}

func (r *ChildR) IsNil() bool {
	return r == nil || r.v == nil
}

func (r *ChildR) Raw() *pb.Child {
    if r == nil {
        return nil
    }
	return r.v
}

func (r *ChildR) GetInt32Field() int32 {
	return r.v.GetInt32Field()
}

func (r *ChildR) GetStringField() string {
	return r.v.GetStringField()
}

